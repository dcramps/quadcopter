/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void throttle_change(GCustomSlider source, GEvent event) { //_CODE_:throttle:547685:
} //_CODE_:throttle:547685:

public void p_gain(GKnob source, GEvent event) { //_CODE_:pKnob:815769:
  pLabel.setText(""+pKnob.getValueF());
} //_CODE_:pKnob:815769:

public void d_gain(GKnob source, GEvent event) { //_CODE_:dKnob:841789:
  dLabel.setText(""+dKnob.getValueF());
} //_CODE_:dKnob:841789:

public void i_gain(GKnob source, GEvent event) { //_CODE_:iKnob:202547:
  iLabel.setText(""+iKnob.getValueF());
} //_CODE_:iKnob:202547:

public void off_click(GButton source, GEvent event) { //_CODE_:offButton:320704:
  kill = true;
  shouldSend = true;
} //_CODE_:offButton:320704:

public void setSliderChange(GSlider2D source, GEvent event) { //_CODE_:setSlider:665996:
  setSlider.setValueY(0.0);
} //_CODE_:setSlider:665996:

public void outputSliderChange(GSlider2D source, GEvent event) { //_CODE_:outputSlider:425279:
  //This should not be used.
} //_CODE_:outputSlider:425279:

public void sendClicked(GButton source, GEvent event) { //_CODE_:sendButton:626218:
  shouldSend = true;
} //_CODE_:sendButton:626218:

public void on_click(GButton source, GEvent event) { //_CODE_:onButton:491784:
  kill = false;
  shouldSend = true;
} //_CODE_:onButton:491784:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  if(frame != null)
    frame.setTitle("Sketch Window");
  throttle = new GCustomSlider(this, 0, 270, 640, 40, "grey_blue");
  throttle.setShowValue(true);
  throttle.setShowLimits(true);
  throttle.setLimits(0, 0, 100);
  throttle.setNbrTicks(10);
  throttle.setNumberFormat(G4P.INTEGER, 0);
  throttle.setOpaque(false);
  throttle.addEventHandler(this, "throttle_change");
  pKnob = new GKnob(this, 20, 340, 100, 100, 0.8);
  pKnob.setTurnRange(110, 70);
  pKnob.setTurnMode(GKnob.CTRL_ANGULAR);
  pKnob.setShowArcOnly(false);
  pKnob.setOverArcOnly(false);
  pKnob.setIncludeOverBezel(false);
  pKnob.setShowTrack(true);
  pKnob.setLimits(0.0, 0.0, 10.0);
  pKnob.setShowTicks(true);
  pKnob.setOpaque(false);
  pKnob.addEventHandler(this, "p_gain");
  dKnob = new GKnob(this, 510, 340, 100, 100, 0.8);
  dKnob.setTurnRange(110, 70);
  dKnob.setTurnMode(GKnob.CTRL_ANGULAR);
  dKnob.setShowArcOnly(false);
  dKnob.setOverArcOnly(false);
  dKnob.setIncludeOverBezel(false);
  dKnob.setShowTrack(true);
  dKnob.setLimits(0.0, 0.0, 10.0);
  dKnob.setShowTicks(true);
  dKnob.setOpaque(true);
  dKnob.addEventHandler(this, "d_gain");
  iKnob = new GKnob(this, 270, 340, 100, 100, 0.8);
  iKnob.setTurnRange(110, 70);
  iKnob.setTurnMode(GKnob.CTRL_ANGULAR);
  iKnob.setShowArcOnly(false);
  iKnob.setOverArcOnly(false);
  iKnob.setIncludeOverBezel(false);
  iKnob.setShowTrack(true);
  iKnob.setLimits(0.0, 0.0, 10.0);
  iKnob.setShowTicks(true);
  iKnob.setOpaque(false);
  iKnob.addEventHandler(this, "i_gain");
  iLabel = new GLabel(this, 280, 450, 80, 20);
  iLabel.setText("0");
  iLabel.setOpaque(false);
  pLabel = new GLabel(this, 30, 450, 80, 20);
  pLabel.setText("0");
  pLabel.setOpaque(false);
  dLabel = new GLabel(this, 520, 450, 80, 20);
  dLabel.setText("0");
  dLabel.setOpaque(false);
  bgSlider2 = new GSlider2D(this, 0, 0, 320, 270);
  bgSlider2.setLimitsX(0.5, 0.0, 1.0);
  bgSlider2.setLimitsY(0.5, 0.0, 1.0);
  bgSlider2.setNumberFormat(G4P.DECIMAL, 2);
  bgSlider2.setOpaque(true);
  offButton = new GButton(this, 10, 490, 430, 80);
  offButton.setText("OFF");
  offButton.addEventHandler(this, "off_click");
  bgSlider1 = new GSlider2D(this, 320, 0, 320, 270);
  bgSlider1.setLimitsX(0.5, 0.0, 1.0);
  bgSlider1.setLimitsY(0.5, 0.0, 1.0);
  bgSlider1.setNumberFormat(G4P.DECIMAL, 2);
  bgSlider1.setOpaque(true);
  setSlider = new GSlider2D(this, 320, 0, 320, 270);
  setSlider.setLimitsX(0.0, -90.0, 90.0);
  setSlider.setLimitsY(0.5, -90.0, 90.0);
  setSlider.setNumberFormat(G4P.DECIMAL, 2);
  setSlider.setOpaque(false);
  setSlider.addEventHandler(this, "setSliderChange");
  outputSlider = new GSlider2D(this, 0, 0, 320, 270);
  outputSlider.setLimitsX(0.5, -90.0, 90.0);
  outputSlider.setLimitsY(0.5, -90.0, 90.0);
  outputSlider.setNumberFormat(G4P.DECIMAL, 2);
  outputSlider.setOpaque(false);
  outputSlider.addEventHandler(this, "outputSliderChange");
  sendButton = new GButton(this, 500, 490, 130, 80);
  sendButton.setText("Send");
  sendButton.addEventHandler(this, "sendClicked");
  onButton = new GButton(this, 450, 490, 40, 80);
  onButton.setText("ON");
  onButton.addEventHandler(this, "on_click");
}

// Variable declarations 
// autogenerated do not edit
GCustomSlider throttle; 
GKnob pKnob; 
GKnob dKnob; 
GKnob iKnob; 
GLabel iLabel; 
GLabel pLabel; 
GLabel dLabel; 
GSlider2D bgSlider2; 
GButton offButton; 
GSlider2D bgSlider1; 
GSlider2D setSlider; 
GSlider2D outputSlider; 
GButton sendButton; 
GButton onButton; 

